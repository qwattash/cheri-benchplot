#!/bin/python

import argparse as ap
import json
import re
import shutil
import subprocess
from collections import defaultdict
from pathlib import Path

import matplotlib.pyplot as plt
import polars as pl
import polars.selectors as cs
import seaborn as sns


def main():
    parser = ap.ArgumentParser("QEMU instruction trace icount diff tool")
    parser.add_argument("data_file", nargs="+", type=Path, help="Path to csv files generated by qemu-trace-counter.py")
    parser.add_argument("--output", type=Path, default=Path.cwd() / "icount-diff.pdf", help="Output plot file")
    parser.add_argument("--aggregate", action="store_true", default=False, help="Aggregate the instruction count")

    args = parser.parse_args()

    data = []
    for path in args.data_file:
        df = pl.read_csv(path)
        df = df.with_columns(pl.lit(path.stem).alias("name"))
        data.append(df)

    baseline = args.data_file[0].stem

    all_df = pl.concat(data, how="vertical").select(cs.all().exclude("^cumul_.*$"))
    data_cols = cs.expand_selector(all_df, cs.numeric())

    base_df = all_df.filter(pl.col("name") == baseline).select(pl.col("fn"),
                                                               cs.all().exclude("fn", "name").name.suffix("_baseline"))
    join_df = all_df.join(base_df, on="fn")

    diff_df = join_df.with_columns(*[(pl.col(c) - pl.col(f"{c}_baseline")).alias(f"{c}_diff")
                                     for c in data_cols]).filter(pl.col("name") != baseline)

    if args.aggregate:
        diff_df = diff_df.group_by("name").sum()
    base_diff_file = args.output.stem
    all_diff_csv = args.output.with_name(f"{base_diff_file}-all.csv")
    diff_df.write_csv(all_diff_csv)

    diff_csv = args.output.with_name(f"{base_diff_file}.csv")
    diff_df.select(cs.ends_with("_diff")).write_csv(diff_csv)

    diff_lf_df = diff_df.melt(value_vars=cs.ends_with("_diff"), id_vars=["fn", "name"], variable_name="group")

    fig, ax = plt.subplots()
    sns.set_theme()
    palette = sns.color_palette(n_colors=len(diff_lf_df["name"].unique()))

    facet = sns.FacetGrid(diff_lf_df, col="group")
    facet.map_dataframe(sns.barplot, x="value", y="fn", hue="name", palette=palette)

    # sns.barplot(x="icount_diff", y="fn", data=diff_df, hue="name")
    facet.add_legend()
    facet.tight_layout()
    facet.savefig(args.output)


if __name__ == "__main__":
    main()
