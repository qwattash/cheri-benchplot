#!/bin/python

import argparse as ap
import json
import re
import shutil
import subprocess
from collections import defaultdict
from pathlib import Path

import matplotlib.pyplot as plt
import polars as pl
import polars.selectors as cs
import seaborn as sns

DELTA = r"Delta "


def main():
    parser = ap.ArgumentParser("QEMU instruction trace icount diff tool")
    parser.add_argument("data_file", nargs="+", type=Path, help="Path to csv files generated by qemu-trace-counter.py")
    parser.add_argument("--output", type=Path, default=Path.cwd() / "icount-diff.pdf", help="Output plot file")
    parser.add_argument("--targets", type=str, nargs="+", help="Human-readable column names for each data_file")

    args = parser.parse_args()

    if args.targets:
        assert len(args.data_file) == len(args.targets)
        data_names = args.targets
    else:
        data_names = [p.stem for p in args.data_file]
    baseline = data_names[0]

    data = []
    for name, path in zip(data_names, args.data_file):
        df = pl.read_csv(path)
        df = df.with_columns(pl.lit(name).alias("name"))
        data.append(df)

    all_df = pl.concat(data, how="vertical").select(cs.all().exclude("^cumul_.*$"))
    data_cols = cs.expand_selector(all_df, cs.numeric())

    base_df = (all_df.filter(pl.col("name") == baseline).select(pl.col("fn"),
                                                                cs.all().exclude("fn",
                                                                                 "name").name.suffix("_baseline")))
    join_df = all_df.join(base_df, on="fn")

    diff_df = join_df.with_columns(*[(pl.col(c) - pl.col(f"{c}_baseline")).alias(f"{c}_diff") for c in data_cols])
    diff_df_nobaseline = diff_df.filter(pl.col("name") != baseline)

    base_diff_file = args.output.stem
    all_diff_csv = args.output.with_name(f"{base_diff_file}-raw.csv")
    diff_df.write_csv(all_diff_csv)

    # Usable table to show aggregate instruction statistics
    agg_df = diff_df.group_by("name").sum()
    table1_df = agg_df.select(
        pl.col("name").alias("Target"),
        pl.col("all").alias("Total insn"),
        pl.col("adrp").alias(f"{DELTA}PC-relative addr"),
        pl.col("all_diff").alias(f"{DELTA}insn"),
        pl.col("ld_diff").alias(f"{DELTA}load"),
        pl.col("st_diff").alias(f"{DELTA}store"),
        pl.col("ld_pair_diff").alias(f"{DELTA}load pair"),
        pl.col("st_pair_diff").alias(f"{DELTA}store pair")).sort(by="Target")
    table1_csv = args.output.with_name(f"{base_diff_file}-tbl1.csv")
    table1_df.write_csv(table1_csv)
    table2_df = agg_df.select(
        pl.col("name").alias("Target"),
        pl.col("all").alias("Total insn"),
        pl.col("all_diff").alias(f"{DELTA}insn"),
        pl.col("int_ld_pair_diff").alias(f"{DELTA}load int pair"),
        pl.col("int_st_pair_diff").alias(f"{DELTA}store int pair"),
        pl.col("cheri_ld_pair_diff").alias(f"{DELTA}load cap pair"),
        pl.col("cheri_st_pair_diff").alias(f"{DELTA}store cap pair")).sort(by="Target")
    table2_csv = args.output.with_name(f"{base_diff_file}-tbl2.csv")
    table2_df.write_csv(table2_csv)

    # Usable table to show per-function instruction statistics
    # TODO
    table_csv = args.output.with_name(f"{base_diff_file}-fn-tbl.csv")
    table_df = diff_df.select(
        pl.col("fn").alias("Symbol"),
        pl.col("name").alias("Target"),
        pl.col("all").alias("Total insn"),
        pl.col("all_diff").alias(f"{DELTA}insn"),
        pl.col("ld_diff").alias(f"{DELTA}load"),
        pl.col("st_diff").alias(f"{DELTA}store"),
        pl.col("ld_pair_diff").alias(f"{DELTA}load pair"),
        pl.col("st_pair_diff").alias(f"{DELTA}store pair"),
        pl.col("cheri_ld_pair_diff").alias(f"{DELTA}load cap pair"),
        pl.col("cheri_st_pair_diff").alias(f"{DELTA}store cap pair")).sort(by=["Symbol", "Target"])
    table_df.write_csv(table_csv)

    diff_lf_df = diff_df.melt(value_vars=cs.ends_with("_diff"), id_vars=["fn", "name"], variable_name="group")

    # fig, ax = plt.subplots()
    # sns.set_theme()
    # palette = sns.color_palette(n_colors=len(diff_lf_df["name"].unique()))

    # facet = sns.FacetGrid(diff_lf_df, col="group")
    # facet.map_dataframe(sns.barplot, x="value", y="fn", hue="name", palette=palette)

    # # sns.barplot(x="icount_diff", y="fn", data=diff_df, hue="name")
    # facet.add_legend()
    # facet.tight_layout()
    # facet.savefig(args.output)


if __name__ == "__main__":
    main()
