import re
from dataclasses import dataclass
from pathlib import Path

import polars as pl

from ..core.analysis import AnalysisTask
from ..core.artefact import Target, ValueTarget
from ..core.config import Config, ConfigPath, config_field
from ..core.task import dependency, output
from .cheribuild import CheriBuildCompilationDB


@dataclass
class GenCompilationDBConfig(Config):
    source_root: ConfigPath | None = config_field(None, desc="Source directory path to make relative paths")


class CompilationDBFromTrace(AnalysisTask):
    """
    Collect all compilationdb syscall traces and produce
    a csv of files that are touched during the build process.
    """
    task_namespace = "compilationdb"
    task_name = "generate"
    public = True
    task_config_class = GenCompilationDBConfig

    @output
    def compilationdb_dump(self):
        return Target(self, "compilationdb", ext="csv")

    @output
    def compilationdb(self):
        return ValueTarget(self, "compilationdb-df")

    def load_trace(self, scenario, path):
        """
        Load trace generated by 'strace'
        """
        src_root = self.session.user_config.src_path
        if self.config.source_root:
            src_root = self.config.source_root

        open_re = re.compile(r"openat\(.*, ?\"([a-zA-Z0-9_/.-]+\.[hcmS])\"")
        file_set = set()
        with open(path, "r") as strace_fd:
            for line in strace_fd:
                m = open_re.search(line)
                if not m:
                    continue
                p = Path(m.group(1))
                try:
                    rp = p.relative_to(src_root)
                    file_set.add(str(rp))
                except ValueError:
                    # not relative to cheribsd_path
                    continue
        df = pl.DataFrame({"file": list(file_set)})
        df = df.with_columns(pl.lit(scenario.target).alias("target"))
        return df

    def run(self):
        data = []
        for b in self.session.all_benchmarks():
            task = b.find_exec_task(CheriBuildCompilationDB)
            trace = task.build_trace.single_path()
            df = self.load_trace(task.scenario(), trace)
            data.append(df)
        df = pl.concat(data, how="vertical")
        self.compilationdb.assign(df)
        df = df.select("file").unique()
        df.write_csv(self.compilationdb_dump.single_path())
