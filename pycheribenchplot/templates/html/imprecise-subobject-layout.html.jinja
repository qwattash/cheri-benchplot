<!DOCTYPE html>
<head>
  <title>Structures with imprecise sub-object bounds</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
        rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"
        crossorigin="anonymous">
  <style>
    body {
        font-family: "Source Code Pro", monospace, sans-serif;
    }

    strong {
        font-weight: bold;
    }

    .member-desc {
        display: list-item;
    }
    .member-desc-0 {
        list-style-type: disc;
    }
    .member-desc-1 {
        list-style-type: circle;
    }
    .member-desc-2 {
        list-style-type: square;
    }
    .member-desc-3 {
        list-style-type: "-";
    }
    .member-alias-ptr {

    }


    .member-type {
        padding-left: 5px;
        font-weight: normal;
    }
    .member-name {
        font-weight: bold;
    }
    .member-size {
        font-weight: normal;
    }

    .member-imprecise {
        background: #8f151560;
    }
    .select-imprecise-aliased {
        background: #15158f60;
    }
    .hover-imprecise-aliased {
        background: #158f1560;
    }
  </style>
</head>
<body>

  {% macro struct_layout_members(struct_desc) %}
  {% for record in struct_desc.members.iter_rows(named=True) %}
  <div class="row">
    <div class="col-1">
      {{ "+%x" | format(record['byte_offset']) }}
      {%- if record['bit_offset'] %}/{{ record['bit_offset'] }}{% endif %}
    </div>
    <div class="col">
      <span class="member-desc
                   member-desc-{{ record['_record_helper_depth'] % 4 }}
                   rounded-3
                   {{ 'member-imprecise' if record['is_imprecise'] }}
                   {{ 'member-alias-ptr' if false }}"
            style="margin-left: {{ 2 * record['_record_helper_depth'] }}em"
            {%- if record['_aliased_by'] -%}
            data-member-alias-colors="{{ record['_aliased_by'] | join(',') }}"
            {%- endif -%}
            {%- if record['is_imprecise'] -%}
            data-member-alias-target="{{ record['_alias_color'] }}"
            {%- endif %}>
        <span class="member-type">{{ record['member_type']|e }}</span>
        <span class="member-name">{{ record['member_name']|e }}</span>
        <span class="member-size">
          ({{ "%#x" | format(record['byte_size']) }}
          {%- if record['bit_size'] %}:{{ record['bit_size'] }}{% endif %})
        </span>
        {% if record['_alias_pointer_member'] %}
        <span class="badge rounded-pill bg-secondary">Ptr</span>
        {% endif %}
        {% if record['_record_helper_is_array'] %}
        <span class="badge rounded-pill bg-secondary">Array</span>
        {% endif %}
      </span>
    </div>
  </div>
  {% endfor %}
  {% endmacro %}

  {% macro struct_layout(group_id, struct_desc) %}
  <div class="accordion-item">
    <h1 class="accordion-header" id="struct-{{ struct_desc.id }}-header">
      <button class="accordion-button collapsed" type="button"
              data-bs-toggle="collapse"
              data-bs-target="#struct-{{ struct_desc.id }}-data"
              aria-expanded="false"
              aria-controls="struct-{{ struct_desc.id }}-data">
        <span class="m-1">
          Layout of
          <strong>{{ struct_desc.name }}</strong>
          @ {{ struct_desc.location }} size={{ struct_desc.size }}
        </span>
        <small>
          {%- if struct_desc.has_imprecise_ptr_access -%}
          <span class="m-1 badge rounded-pill bg-secondary">Ptr</span>
          {%- endif -%}
          {%- if struct_desc.has_imprecise_array -%}
          <span class="m-1 badge rounded-pill bg-secondary">Array</span>
          {%- endif -%}
        </small>
      </button>
    </h1>
    <div id="struct-{{ struct_desc.id }}-data" class="accordion-collapse collapse"
         aria-labelledby="struct-{{ struct_desc.id }}-header"
         data-bs-parent="#struct-list-group-{{ group_id }}">
      <div class="accordion-body">
        <div class="container-fluid">
          {{ struct_layout_members(struct_desc) }}
        </div>
      </div>
    </div>
  </div>
  {% endmacro %}

  {% macro target_group_item(target_group) %}
  <div class="accordion-item">
    <h1 class="accordion-header" id="group-{{ target_group.id }}-header">
      <button class="accordion-button collapsed" type="button"
              data-bs-toggle="collapse"
              data-bs-target="#group-{{ target_group.id }}-data"
              aria-expanded="false"
              aria-controls="group-{{ target_group.id }}-data">
        <span>
          Structure layouts with imprecise members for
          <strong>{{ target_group.desc }}</strong>.
        </span>
      </button>
    </h1>
    <div id="group-{{ target_group.id }}-data" class="accordion-collapse collapse"
         aria-labelledby="group-{{ target_group.id }}-header"
         data-bs-parent="#root-accordion">
      <div class="accordion-body">
        <div class="accordion m-2" id="struct-list-group-{{ target_group.id }}">
          {% for struct_desc in target_group.struct_list %}
            {{ struct_layout(target_group.id, struct_desc) }}
          {% endfor %}
        </div>
      </div>
    </div>
  </div>
  {% endmacro %}

  <h1 class="p-2">Data structures with imprecise sub-objects</h1>
  <div class="container-fluid m-2">
    <div class="accordion" id="root-accordion">
    {% for target_group in layout_data %}
      {{ target_group_item(target_group) }}
    {% endfor %}
    </div>
  </div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
        crossorigin="anonymous"></script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
      document.querySelectorAll("span[data-member-alias-target]").forEach((item) => {
          const color = item.getAttribute("data-member-alias-target");
          const top_level_struct = item.closest(".accordion-body");
          item.addEventListener("mouseover", (event) => {
              top_level_struct.querySelectorAll("span[data-member-alias-colors]").forEach((target) => {
                  if (target.getAttribute("data-member-alias-colors").split(",").indexOf(color) >= 0) {
                      target.classList.add("hover-imprecise-aliased");
                  }
              });
          });
          item.addEventListener("mouseout", (event) => {
              top_level_struct.querySelectorAll("span[data-member-alias-colors]").forEach((target) => {
                  if (target.getAttribute("data-member-alias-colors").split(",").indexOf(color) >= 0) {
                      target.classList.remove("hover-imprecise-aliased");
                  }
              });
          });
          item.addEventListener("click", (event) => {
              top_level_struct.querySelectorAll("span[data-member-alias-colors]").forEach((target) => {
                  if (target.getAttribute("data-member-alias-colors").split(",").indexOf(color) >= 0) {
                      target.classList.toggle("select-imprecise-aliased");
                  }
              });
          });
      });
  });
</script>
</body>
